// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: transactions.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionRequestResponse, error)
	GetTransactionById(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTxnRequestResponse, error)
	ListTransactions(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (Transactions_ListTransactionsClient, error)
}

type transactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsClient(cc grpc.ClientConnInterface) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionRequestResponse, error) {
	out := new(CreateTransactionRequestResponse)
	err := c.cc.Invoke(ctx, "/Transactions/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) GetTransactionById(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTxnRequestResponse, error) {
	out := new(GetTxnRequestResponse)
	err := c.cc.Invoke(ctx, "/Transactions/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) ListTransactions(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (Transactions_ListTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[0], "/Transactions/ListTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionsListTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transactions_ListTransactionsClient interface {
	Recv() (*GetTxnRequestResponse, error)
	grpc.ClientStream
}

type transactionsListTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionsListTransactionsClient) Recv() (*GetTxnRequestResponse, error) {
	m := new(GetTxnRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionsServer is the server API for Transactions service.
// All implementations must embed UnimplementedTransactionsServer
// for forward compatibility
type TransactionsServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionRequestResponse, error)
	GetTransactionById(context.Context, *GetTransactionRequest) (*GetTxnRequestResponse, error)
	ListTransactions(*ListTransactionRequest, Transactions_ListTransactionsServer) error
	mustEmbedUnimplementedTransactionsServer()
}

// UnimplementedTransactionsServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsServer struct {
}

func (UnimplementedTransactionsServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionsServer) GetTransactionById(context.Context, *GetTransactionRequest) (*GetTxnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedTransactionsServer) ListTransactions(*ListTransactionRequest, Transactions_ListTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionsServer) mustEmbedUnimplementedTransactionsServer() {}

// UnsafeTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServer will
// result in compilation errors.
type UnsafeTransactionsServer interface {
	mustEmbedUnimplementedTransactionsServer()
}

func RegisterTransactionsServer(s grpc.ServiceRegistrar, srv TransactionsServer) {
	s.RegisterService(&Transactions_ServiceDesc, srv)
}

func _Transactions_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transactions/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Transactions/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).GetTransactionById(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_ListTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsServer).ListTransactions(m, &transactionsListTransactionsServer{stream})
}

type Transactions_ListTransactionsServer interface {
	Send(*GetTxnRequestResponse) error
	grpc.ServerStream
}

type transactionsListTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionsListTransactionsServer) Send(m *GetTxnRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Transactions_ServiceDesc is the grpc.ServiceDesc for Transactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _Transactions_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Transactions_GetTransactionById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTransactions",
			Handler:       _Transactions_ListTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transactions.proto",
}
